// <auto-generated />
using System;
using Administration.Service.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Administration.Service.Data.Migrations
{
    [DbContext(typeof(AdministrationServiceDbContext))]
    [Migration("20250420214636_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Administration.Service.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AspNetRoles", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Administration.Service.Data.Entities.Saloon", b =>
                {
                    b.Property<Guid>("SaloonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SaloonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SaloonId");

                    b.ToTable("Saloons");
                });

            modelBuilder.Entity("Administration.Service.Data.Entities.SaloonWorker", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SaloonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WorkingDays")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "SaloonId");

                    b.HasIndex("SaloonId");

                    b.ToTable("SaloonWorkers");
                });

            modelBuilder.Entity("Administration.Service.Data.Entities.Service", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ServiceId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Administration.Service.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AspNetUsers", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Administration.Service.Data.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Administration.Service.Data.Entities.WorkerService", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SaloonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "ServiceId");

                    b.HasIndex("SaloonId");

                    b.HasIndex("ServiceId");

                    b.ToTable("WorkerServices");
                });

            modelBuilder.Entity("Administration.Service.Data.Entities.SaloonWorker", b =>
                {
                    b.HasOne("Administration.Service.Data.Entities.Saloon", "Saloon")
                        .WithMany("SaloonWorkers")
                        .HasForeignKey("SaloonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Administration.Service.Data.Entities.User", "Worker")
                        .WithMany("SaloonWorkers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Saloon");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("Administration.Service.Data.Entities.UserRole", b =>
                {
                    b.HasOne("Administration.Service.Data.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Administration.Service.Data.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Administration.Service.Data.Entities.WorkerService", b =>
                {
                    b.HasOne("Administration.Service.Data.Entities.Saloon", null)
                        .WithMany("WorkerServices")
                        .HasForeignKey("SaloonId");

                    b.HasOne("Administration.Service.Data.Entities.Service", "Service")
                        .WithMany("WorkerServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Administration.Service.Data.Entities.User", "Worker")
                        .WithMany("WorkerServices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("Administration.Service.Data.Entities.Saloon", b =>
                {
                    b.Navigation("SaloonWorkers");

                    b.Navigation("WorkerServices");
                });

            modelBuilder.Entity("Administration.Service.Data.Entities.Service", b =>
                {
                    b.Navigation("WorkerServices");
                });

            modelBuilder.Entity("Administration.Service.Data.Entities.User", b =>
                {
                    b.Navigation("SaloonWorkers");

                    b.Navigation("UserRoles");

                    b.Navigation("WorkerServices");
                });
#pragma warning restore 612, 618
        }
    }
}
